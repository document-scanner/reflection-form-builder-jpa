/**
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package richtercloud.reflection.form.builder.jpa;

import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.util.Map;
import java.util.Set;
import javax.persistence.EntityExistsException;
import javax.persistence.EntityManager;
import javax.swing.GroupLayout;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import richtercloud.reflection.form.builder.FieldHandler;
import richtercloud.reflection.form.builder.ReflectionFormPanel;
import richtercloud.reflection.form.builder.retriever.ValueRetriever;

/**
 *
 * @author richter
 */
public class JPAReflectionFormPanel extends ReflectionFormPanel {
    private static final long serialVersionUID = 1L;
    private final static Logger LOGGER = LoggerFactory.getLogger(JPAReflectionFormPanel.class);
    private EntityManager entityManager;
    private ReflectionFormPanel reflectionFormPanel;
    private String persistFailureDialogTitle;

    /**
     * Creates new form JPAReflectionFormPanel
     */
    public JPAReflectionFormPanel() {
        initComponents();
    }

    public JPAReflectionFormPanel(EntityManager entityManager,
            ReflectionFormPanel reflectionFormPanel,
            Class<?> entityClass,
            Map<Field, JComponent> fieldMapping,
            Map<Class<? extends JComponent>, ValueRetriever<?, ?>> valueRetrieverMapping,
            Map<Type, FieldHandler<?>> classMapping,
            String persistFailureDialogTitle) throws IllegalArgumentException, IllegalAccessException {
        super(fieldMapping, reflectionFormPanel.retrieveInstance(), entityClass, valueRetrieverMapping, classMapping);
        initComponents();
        this.entityManager = entityManager;
        this.reflectionFormPanel = reflectionFormPanel;
        GroupLayout reflectionFormPanelPanelLayout = new GroupLayout(this.reflectionFormPanelPanel);
        this.reflectionFormPanelPanel.setLayout(reflectionFormPanelPanelLayout);
        reflectionFormPanelPanelLayout.setHorizontalGroup(reflectionFormPanelPanelLayout.createSequentialGroup().addComponent(this.reflectionFormPanel));
        reflectionFormPanelPanelLayout.setVerticalGroup(reflectionFormPanelPanelLayout.createSequentialGroup().addComponent(this.reflectionFormPanel));
        this.persistFailureDialogTitle = persistFailureDialogTitle;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        saveButton = new javax.swing.JButton();
        overviewButton = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        reflectionFormPanelPanel = new javax.swing.JPanel();

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        overviewButton.setText("Overview");

        statusLabel.setText(" ");

        javax.swing.GroupLayout reflectionFormPanelPanelLayout = new javax.swing.GroupLayout(reflectionFormPanelPanel);
        reflectionFormPanelPanel.setLayout(reflectionFormPanelPanelLayout);
        reflectionFormPanelPanelLayout.setHorizontalGroup(
            reflectionFormPanelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        reflectionFormPanelPanelLayout.setVerticalGroup(
            reflectionFormPanelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 217, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(reflectionFormPanelPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 242, Short.MAX_VALUE)
                        .addComponent(overviewButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveButton))
                    .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reflectionFormPanelPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(statusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(overviewButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        Object instance;
        try {
            instance = this.reflectionFormPanel.retrieveInstance();
        } catch (IllegalArgumentException | IllegalAccessException ex) {
            String message = String.format("the following exception occured during persisting entity of type '%s'", this.reflectionFormPanel.getEntityClass());
            LOGGER.debug(message, ex);
            statusLabel.setText(String.format("<html>%s: %s</html>", message, ReflectionFormPanel.generateExceptionMessage(ex)));
            return;
        }

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<Object>> violations = validator.validate(instance);
        if(!violations.isEmpty()) {
            StringBuilder messageBuilder = new StringBuilder(1000);
            messageBuilder.append("<html>");
            messageBuilder.append("The following constraints are violated:<br/>");
            for(ConstraintViolation<Object> violation : violations) {
                messageBuilder.append(violation.getPropertyPath());
                messageBuilder.append(": ");
                messageBuilder.append(violation.getMessage());
                messageBuilder.append("<br/>");
            }
            messageBuilder.append("Fix the corresponding values in the components.");
            messageBuilder.append("</html>");
            String message = messageBuilder.toString();
            JOptionPane.showMessageDialog(this, message, this.persistFailureDialogTitle, JOptionPane.WARNING_MESSAGE);
            return;
        }
        try {
            entityManager.getTransaction().begin();
            entityManager.persist(instance);
            entityManager.getTransaction().commit();
            statusLabel.setText(String.format("<html>persisted entity of type '%s' successfully</html>", this.reflectionFormPanel.getEntityClass()));
        }catch(EntityExistsException ex) {
            entityManager.getTransaction().rollback();
            String message = String.format("the following exception occured during persisting entity of type '%s'", this.reflectionFormPanel.getEntityClass());
            LOGGER.debug(message, ex);
            statusLabel.setText(String.format("<html>%s: %s</html>", message, ReflectionFormPanel.generateExceptionMessage(ex)));
        }
    }//GEN-LAST:event_saveButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton overviewButton;
    private javax.swing.JPanel reflectionFormPanelPanel;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables
}

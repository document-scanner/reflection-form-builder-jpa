/**
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package richtercloud.reflection.form.builder.jpa.panels;

import java.util.HashSet;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;
import richtercloud.reflection.form.builder.FieldUpdateListener;
import richtercloud.reflection.form.builder.jpa.IdGenerator;

/**
 * A component to generate ids for entity instances. Ids are only generated for
 * valid instances (i.e. after validation with Java Validation API). This
 * restriction isn't necessary, but generation of intermediate ids on invalid
 * instances doesn't make sense.
 *
 * @author richter
 */
/*
internal implementation notes:
- There's no sense in providing a generic id panel for numeric ids because
type of SpinnerNumberModel is determined at initialization.
*/
public class LongIdPanel extends javax.swing.JPanel {
    private static final long serialVersionUID = 1L;
    private IdGenerator idGenerator;
    private Object entity;
    private final static ValidatorFactory FACTORY = Validation.buildDefaultValidatorFactory();
    private String idValidationFailureDialogTitle;
    private final SpinnerNumberModel idSpinnerModel = new SpinnerNumberModel((Long)0L, (Long)0L, (Long)Long.MAX_VALUE, (Long)1L);
    private Set<LongIdPanelUpdateListener> updateListener = new HashSet<>();
    private Long value;

    /**
     * Creates new form IdPanel
     */
    protected LongIdPanel() {
        initComponents();
    }

    public LongIdPanel(IdGenerator idGenerator,
            Object entity,
            Long initialValue,
            String idValidationFailureDialogTitle) {
        this();
        this.idGenerator = idGenerator;
        this.entity = entity;
        this.idValidationFailureDialogTitle = idValidationFailureDialogTitle;
        this.idSpinner.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                for(LongIdPanelUpdateListener updateListener : LongIdPanel.this.updateListener) {
                    updateListener.onUpdate(new LongIdPanelUpdateEvent((Long) LongIdPanel.this.idSpinner.getValue()));
                }
            }
        });
        this.value = initialValue;
        if(initialValue == null) {
            this.nullCheckBox.setSelected(true);
            this.idSpinner.setEnabled(false);
        }else {
            this.idSpinner.setValue(initialValue);
            this.nullCheckBox.setSelected(false); //might not be necessary, but is clearer
        }
    }

    public JSpinner getIdSpinner() {
        return idSpinner;
    }

    public void addUpdateListener(LongIdPanelUpdateListener updateListener) {
        this.updateListener.add(updateListener);
    }

    public void removeUpdateListener(LongIdPanelUpdateListener updateListener) {
        this.updateListener.remove(updateListener);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        idSpinner = new javax.swing.JSpinner();
        nextIdButton = new javax.swing.JButton();
        nullCheckBox = new javax.swing.JCheckBox();

        idSpinner.setModel(this.idSpinnerModel);

        nextIdButton.setText("Next id");
        nextIdButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextIdButtonActionPerformed(evt);
            }
        });

        nullCheckBox.setText("null");
        nullCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nullCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(nullCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(idSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 681, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nextIdButton))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(idSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(nextIdButton)
                .addComponent(nullCheckBox))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void nextIdButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextIdButtonActionPerformed
        Validator validator = FACTORY.getValidator();
        Set<ConstraintViolation<Object>> violations = validator.validate(this.entity);
        if(!violations.isEmpty()) {
            StringBuilder messageBuilder = new StringBuilder(1000);
            messageBuilder.append("<html>");
            messageBuilder.append("The following constraints are violated:<br/>");
            for(ConstraintViolation<Object> violation : violations) {
                messageBuilder.append(violation.getPropertyPath());
                messageBuilder.append(": ");
                messageBuilder.append(violation.getMessage());
                messageBuilder.append("<br/>");
            }
            messageBuilder.append("Fix the corresponding values in the components.");
            messageBuilder.append("</html>");
            String message = messageBuilder.toString();
            JOptionPane.showMessageDialog(this.getParent(), message, this.idValidationFailureDialogTitle, JOptionPane.WARNING_MESSAGE);
            return;
        }
        this.idSpinner.setValue(idGenerator.getNextId(this.entity));
    }//GEN-LAST:event_nextIdButtonActionPerformed

    private void nullCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nullCheckBoxActionPerformed
        if(nullCheckBox.isSelected()) {
            this.value = null;
            this.idSpinner.setEnabled(false);
        }else {
            this.value = (Long) idSpinner.getValue();
            this.idSpinner.setEnabled(true);
        }
        for(LongIdPanelUpdateListener updateListener : this.updateListener) {
            updateListener.onUpdate(new LongIdPanelUpdateEvent(value));
        }
    }//GEN-LAST:event_nullCheckBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner idSpinner;
    private javax.swing.JButton nextIdButton;
    private javax.swing.JCheckBox nullCheckBox;
    // End of variables declaration//GEN-END:variables
}
